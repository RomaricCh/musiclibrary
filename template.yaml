AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Specification template describing your function.

Parameters:
  StageName:
    Type: String
  BucketPrefix:
    Type: String
  CicdBucket:
    Type: String
Resources:


  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-api.html
  DefaultApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: live
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            # Chemin vers la spec OpenAPI
            Location: !Sub "s3://${CicdBucket}/spec/api-spec.yaml"

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
  FindSongsFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Chemin du handler de la lambda
      Handler: src.handler.find_by_author_and_title
      # Runtime utilisé pour l'exécution de la lambda
      Runtime: python3.9
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
      # Droits IAM affectés à la l'exécution de la lambda
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - CloudWatchPutMetricPolicy: { }
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DefaultApi
            Path: /songs
            Method: GET
      # Variables d'environnement
      Environment:
        Variables:
          TABLE_NAME: !Ref Table

  CreateSongFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src.handler.create_song
      Runtime: python3.9
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - CloudWatchPutMetricPolicy: { }
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DefaultApi
            Path: /songs
            Method: POST
      Environment:
        Variables:
          TABLE_NAME: !Ref Table

  DeleteSongFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src.handler.delete_song
      Runtime: python3.9
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - CloudWatchPutMetricPolicy: { }
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DefaultApi
            Path: /songs/{song_id}
            Method: DELETE
      Environment:
        Variables:
          TABLE_NAME: !Ref Table

  ImportSongCsvFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src.handler.import_csv
      Runtime: python3.9
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - S3ReadPolicy:
            BucketName: !Sub "${BucketPrefix}-${StageName}"
        - CloudWatchPutMetricPolicy: { }
      Environment:
        Variables:
          TABLE_NAME: !Ref Table

  CSVBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "${BucketPrefix}-${StageName}"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt ImportSongCsvFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .csv

  ProcessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ImportSongCsvFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${BucketPrefix}-${StageName}'
      SourceAccount: !Ref AWS::AccountId

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-simpletable.html
  # https://docs.aws.amazon.com/fr_fr/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "musiclibrary-${StageName}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S
        - AttributeName: author
          AttributeType: S
        - AttributeName: date
          AttributeType: S
        - AttributeName: title
          AttributeType: S
      KeySchema:
        - AttributeName: author
          KeyType: HASH
        - AttributeName: title
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: author-date
          KeySchema:
            - AttributeName: author
              KeyType: HASH
            - AttributeName: date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      GlobalSecondaryIndexes:
        - IndexName: uuid
          KeySchema:
            - AttributeName: uuid
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  LambdaCreationAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: musiclibrary create tracking
        AlarmName: MusicLibraryCreateAlarm
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Threshold: 10
        Metrics:
        - Id: m1
          MetricStat:
            Metric:
              MetricName: create
              Namespace: musiclibrary
            Period: 60
            Stat: Sum

  LambdaExceptionTrackingAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: musiclibrary exception tracking
        AlarmName: MusicLibraryExceptionAlarm
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Threshold: 2
        Metrics:
        - Expression: SUM([m1, m2, m3])
          Id: sum_metric
        - Id: m1
          MetricStat:
            Metric:
              MetricName: create-exception
              Namespace: musiclibrary
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m2
          MetricStat:
            Metric:
              MetricName: delete-exception
              Namespace: musiclibrary
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m3
          MetricStat:
            Metric:
              MetricName: find-exception
              Namespace: musiclibrary
            Period: 60
            Stat: Sum
          ReturnData: False